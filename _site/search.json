[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "This is my personal blog or better my personal knowledge base where I am writing down my thoughts all around APIs, security, Linux, Python, data processing, natural language processing and more.\nLanguages I use are:\nPython Javascript\nThe tools I use:\nDjango Flask Reactjs Pyspark Git SQL Figma Azure Docker Heroku CircleCI\nReach out to me on my socials below."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "articles",
    "section": "",
    "text": "news\n\n\ncode\n\n\nanalysis\n\n\nAPIs\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\nfoscraft\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nAPIs\n\n\ntech\n\n\nprogramming\n\n\nengineering\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\nfoscraft\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nAPIs\n\n\ntech\n\n\nprogramming\n\n\nengineering\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\nfoscraft\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "How to keep your HTTP Cookies secure.",
    "section": "",
    "text": "The data they contain can be sensitive and personal, such as access tokens and session IDs, an obvious target for attackers. For this reason, securing them is vital.\nSecurely configuring cookies to keep their data safer should always be a priority if you decide your site requires them.\nBelow are the attributes you should know to ensure cookie securityüëáüèº\nSession vs. Persistent cookies\nCookies can be valid for a certain time using the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attribute.\nUsing these makes a Cookie persistent, meaning it will persist even if the browser restarts as long as the expiry date is set sometime in the future.\nThe opposite of a persistent cookie is a session cookie when the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attributes are omitted.\nSession cookies will expire automatically when the browser closes (the session ends).\nThe ‚ÄòSecure‚Äô Flag\nThe secure flag prevents a cookie from being sent over an unencrypted connection.\nYou should always use this when configuring cookies carrying sensitive data, as it will always be sent over HTTPS, which removes the risk of interception attacks.\nThe ‚ÄòHTTPOnly‚Äô Flag\nBy default, all cookies can be accessed and read by JavaScript.\nThe HTTPOnly flag tells the browser not to share the cookie with JavaScript by removing it from the ‚Äòwindow.cookie‚Äô variable, allowing it to stay hidden between the browser and server.\nThe ‚ÄòSameSite‚Äô Flag\nThis flag eliminates the risk of CSRF(Cross-Site-Request-Forgery). It prevents the cookie from being used in requests generated from different origins.\n‚ÄòSameSite‚Äô causes the browser to check if the request origin matches the origin that set the cookie.\nSummary\nNever store sensitive data in cookies unless it‚Äôs a necessity.\nAlways use the SameSite, HTTPOnly, and Secure flags.\nAim to use session cookies for sensitive data. If you use persistent cookies, keep their lifetime short and expire them soon.\nI hope you liked this thread!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/How-to-keep-your-HTTP-Cookies-secure/index.html",
    "href": "posts/How-to-keep-your-HTTP-Cookies-secure/index.html",
    "title": "How to keep your HTTP Cookies secure.",
    "section": "",
    "text": "The data they contain can be sensitive and personal, such as access tokens and session IDs, an obvious target for attackers. For this reason, securing them is vital.\nSecurely configuring cookies to keep their data safer should always be a priority if you decide your site requires them.\nBelow are the attributes you should know to ensure cookie securityüëáüèº\nSession vs. Persistent cookies\nCookies can be valid for a certain time using the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attribute.\nUsing these makes a Cookie persistent, meaning it will persist even if the browser restarts as long as the expiry date is set sometime in the future.\nThe opposite of a persistent cookie is a session cookie when the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attributes are omitted.\nSession cookies will expire automatically when the browser closes (the session ends).\nThe ‚ÄòSecure‚Äô Flag\nThe secure flag prevents a cookie from being sent over an unencrypted connection.\nYou should always use this when configuring cookies carrying sensitive data, as it will always be sent over HTTPS, which removes the risk of interception attacks.\nThe ‚ÄòHTTPOnly‚Äô Flag\nBy default, all cookies can be accessed and read by JavaScript.\nThe HTTPOnly flag tells the browser not to share the cookie with JavaScript by removing it from the ‚Äòwindow.cookie‚Äô variable, allowing it to stay hidden between the browser and server.\nThe ‚ÄòSameSite‚Äô Flag\nThis flag eliminates the risk of CSRF(Cross-Site-Request-Forgery). It prevents the cookie from being used in requests generated from different origins.\n‚ÄòSameSite‚Äô causes the browser to check if the request origin matches the origin that set the cookie.\nSummary\nNever store sensitive data in cookies unless it‚Äôs a necessity.\nAlways use the SameSite, HTTPOnly, and Secure flags.\nAim to use session cookies for sensitive data. If you use persistent cookies, keep their lifetime short and expire them soon.\nI hope you liked this thread!"
  },
  {
    "objectID": "posts/HTTP-Cookies-secure/index.html",
    "href": "posts/HTTP-Cookies-secure/index.html",
    "title": "How to keep your HTTP Cookies secure.",
    "section": "",
    "text": "Cookies are small packets of data sent by the server and stored in the browser.\nThe data they contain can be sensitive and personal, such as access tokens and session IDs, an obvious target for attackers. For this reason, securing them is vital.\nSecurely configuring cookies to keep their data safer should always be a priority if you decide your site requires them.\nBelow are the attributes you should know to ensure cookie securityüëáüèº\nSession vs. Persistent cookies\nCookies can be valid for a certain time using the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attribute.\nUsing these makes a Cookie persistent, meaning it will persist even if the browser restarts as long as the expiry date is set sometime in the future.\nThe opposite of a persistent cookie is a session cookie when the ‚Äòmax-age‚Äô or ‚Äòexpires‚Äô attributes are omitted.\nSession cookies will expire automatically when the browser closes (the session ends).\nThe ‚ÄòSecure‚Äô Flag\nThe secure flag prevents a cookie from being sent over an unencrypted connection.\nYou should always use this when configuring cookies carrying sensitive data, as it will always be sent over HTTPS, which removes the risk of interception attacks.\nThe ‚ÄòHTTPOnly‚Äô Flag\nBy default, all cookies can be accessed and read by JavaScript.\nThe HTTPOnly flag tells the browser not to share the cookie with JavaScript by removing it from the ‚Äòwindow.cookie‚Äô variable, allowing it to stay hidden between the browser and server.\nThe ‚ÄòSameSite‚Äô Flag\nThis flag eliminates the risk of CSRF(Cross-Site-Request-Forgery). It prevents the cookie from being used in requests generated from different origins.\n‚ÄòSameSite‚Äô causes the browser to check if the request origin matches the origin that set the cookie.\nSummary\nNever store sensitive data in cookies unless it‚Äôs a necessity.\nAlways use the SameSite, HTTPOnly, and Secure flags.\nAim to use session cookies for sensitive data. If you use persistent cookies, keep their lifetime short and expire them soon.\nI hope you liked this thread!"
  },
  {
    "objectID": "posts/rest-api/index.html",
    "href": "posts/rest-api/index.html",
    "title": "REST APIs",
    "section": "",
    "text": "REST API\nIt Is a web service based on REST architecture that allows communication between different systems.\nIt uses HTTP requests to GET, PUT, POST, and DELETE data. REST API is often used in web applications to access data from a server.\nAPI Client\nAn API Client is a software program that makes it easy to work with Application Programming Interfaces (APIs).\nIt can be used to access data or perform actions on behalf of a user.\nAPI Clients are often used by developers to test APIs.\nAPI Resource\nAn API resource is a specific type of data that can be accessed by an application programming interface (API). API Server\nAn API server allows two different systems to communicate with each other.\nIn most cases, an API server enables a web application to interact with a database.\nAPI Scalability\nAPI scalability refers to the ability of an API to handle increased loads of data or traffic without adversely affecting performance.\nA scalable API can handle large amounts of data and traffic without compromising speed or functionality.\nStateless API\nA stateless API is an API that does not maintain a state between requests.\nEach request is independent of any other request, and state information is not stored on the server.\nAPI Cache\nAn API is cacheable if the data it returns can be stored in a cache.\nCache allows the same data to be returned for multiple requests without having to fetch it from the original source each time.\nCaching can improve performance.\nLayered System\nA layered system, means that each layer is responsible for a specific set of tasks.\nThe most common layers are the presentation layer, the business logic layer, and the data access layer."
  },
  {
    "objectID": "posts/api-terms/index.html",
    "href": "posts/api-terms/index.html",
    "title": "API related terms",
    "section": "",
    "text": "25 API-related terms every web developer should be aware of:\nEndpoint\nAn endpoint is nothing but the location(URL) where the actual resource is present.\nOrigin Server\nThe origin server is the actual server that contains the data and servers on the client‚Äôs request.\nThere may or may not be other intermediate servers included in the path.\nProxy Server\nServers have the ability to further pass your request to the other server.\nThese types of intermediate servers are known as proxy servers.\nDNS Server\nDNS stands for Domain Name System.\nAs computer devices are interacted using IP addresses, the DNS server provides the IP address of the requested URL.\nAPI key\nAn API key is a unique code for every user which lets you call an API.\nThe length of an API key could be anything.\nThe only rule is that these keys must be unique and not easy to guess.\nGenerally, API keys contain lower case and upper case letters with numbers.\nAPI Token\nThe API token is a unique identifier of an application requesting access to your API.\nAn API token is a form of authentication similar to a username/password.\nAccess token\nAn access token is used for authentication.\nApplications use an access token to authenticate themselves so that they can make an API call.\nSDK\nSDK stands for Software Development Kit.\nIt is a set of development tools that allows the creation of software or an application for a particular platform.\nSDK provides you with the whole package from compilers to debuggers to even a software development framework.\nRPC\nRemote Procedure Call (RPC) is the oldest client-server communication method in use today. Instead of the traditional HTTP call, RPC uses a function call.\nIt means that on the client-side, you invoke a function that is written on the server-side code.\nCORS\nCORS is an HTTP-based mechanism that lets you request data from one URL to a different URL.\nCheck out this note for more details: üëáüèª Screenshot from 2022-09-16 15-18-30\nAsync API\nAsyncAPI is an open-source project aimed at improving the current state of Event-Driven Architecture.\nThese APIs allow relatively time-consuming requests to be processed in the background while other requests are made.\nInternal API\nInternal API, also known as Private API is only accessible to the developers within an organization.\nAPI Caching\nAPI Caching is the ability to store copies of frequently accessed data in several places along the request-response path.\nExternal API\nExternal API, also known as Public API is accessible to all the developers outside the enterprise or organization.\nHTTP cookies\nAn HTTP cookie is a small piece of data created by the web server inside your browser.\nThe data inside a cookie has an ID that is unique to you and your computer. This ID helps the server know who the user is to send the data accordingly.\nAuthorization\nAuthorization always comes after authentication. It is the process of permitting users to access different resources from the server, and it‚Äôs not visible and changeable by the user.\nMicroservices\nA microservice is an application design that breaks up a monolithic architecture into small, self-containing services.\nOpenAPI spec\nIt is a format to define structure and syntax for REST APIs. It provides a standard that allows both humans and computers to discover and understand the service‚Äôs capabilities without access to source code, documentation, or traffic inspection.\nComposite API\nComposite API is a design approach in which we bundle multiple API requests into a single API call.\nAPI Versioning\nAPI versioning is the practice of managing changes in your API.\nYou should version your API if you are introducing any breaking changes. Clients can still access the old version, and their products will not break as soon as you launch a new release.\nAuthentication\nAuthentication and authorization are the two most confusing terms.\nAuthentication is validating the user to identify if they are who they claim to be.\nAPI Lifecycle\nAPI lifecycle is the entire lifespan of any particular API from its planning phase to when it gets stale."
  }
]